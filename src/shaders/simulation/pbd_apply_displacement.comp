#version 450

layout(local_size_x = 256) in;

layout(push_constant) uniform Constants
{
    vec4 aabb_min;
    vec4 aabb_max;
    uint particle_count;
    float rest_density;
    float smoothing_radius;
    float smoothing_radius_sq;
    float spiky_kernel_factor;
    float spiky_grad_kernel_factor;
    float constraint_epsilon;
    float relaxation_factor;
    float grid_size;
    uint max_neighbors;
}
constants;

layout(binding = 0) buffer PredictedPositionBuffer
{
    vec4 predicted_positions[];
};

layout(binding = 1) readonly buffer DeltaPositionBuffer
{
    vec4 delta_positions[];
};

void main()
{
    uint i = gl_GlobalInvocationID.x;
    if (i >= constants.particle_count)
        return;

    // p_i^new = p_i^predicted + Î”p_i
    vec4 current_position = predicted_positions[i];
    vec4 displacement = delta_positions[i];
    
    vec4 new_position = current_position + displacement;
    
    for (int axis = 0; axis < 3; ++axis)
    {
        if (new_position[axis] < constants.aabb_min[axis])
        {
            float small_offset = 1e-5 * (float(i % 7) - 3.0);
            new_position[axis] = constants.aabb_min[axis] + abs(small_offset);
        }
        if (new_position[axis] > constants.aabb_max[axis])
        {
            float small_offset = 1e-5 * (float(i % 7) - 3.0);
            new_position[axis] = constants.aabb_max[axis] - abs(small_offset);
        }
    }
    
    predicted_positions[i] = new_position;
} 