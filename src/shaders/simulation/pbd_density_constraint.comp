#version 450

layout(local_size_x = 256) in;

layout(push_constant) uniform Constants
{
    uint particle_count;
    float rest_density;
    float smoothing_radius;
    float smoothing_radius_sq;
    float spiky_kernel_factor;
    float spiky_grad_kernel_factor;
    float constraint_epsilon;
    float relaxation_factor;
    uint max_neighbors;
}
constants;

layout(binding = 0) readonly buffer PositionBuffer
{
    vec4 positions[];
};

layout(binding = 1) buffer PredictedPositionBuffer
{
    vec4 predicted_positions[];
};

layout(binding = 2) readonly buffer DensityBuffer
{
    float densities[];
};

layout(binding = 3) readonly buffer SortedIndexBuffer
{
    uint sorted_indices[];
};

// Spiky核函数，用于压力计算
float spiky_kernel(float r, float h)
{
    if (r >= h) return 0.0;
    float diff = h - r;
    return constants.spiky_kernel_factor * diff * diff * diff;
}

// Spiky核函数的梯度，用于计算约束力的方向
vec3 spiky_gradient(vec3 r_vec, float r, float h)
{
    if (r >= h || r == 0.0) return vec3(0.0);
    float diff = h - r;
    return constants.spiky_grad_kernel_factor * diff * diff * (r_vec / r);
}

// 计算密度约束C_i = ρ_i / ρ_0 - 1
float density_constraint(float density)
{
    return density / constants.rest_density - 1.0;
}

void main()
{
    uint i = gl_GlobalInvocationID.x;
    if (i >= constants.particle_count)
        return;

    vec3 pos_i = predicted_positions[i].xyz;
    float density_i = densities[i];
    
    // 计算密度约束值
    float constraint = density_constraint(density_i);
    
    // 如果约束已经满足，不需要校正
    if (abs(constraint) < constants.constraint_epsilon)
        return;
    
    // 计算约束梯度的模长平方和
    float gradient_sum_sq = 0.0;
    vec3 gradient_i = vec3(0.0);
    
    // 计算与邻居粒子的梯度
    uint search_count = min(constants.max_neighbors, constants.particle_count);
    
    // 确保原始位置缓冲区被使用 (用于稳定性检查)
    vec3 original_pos = positions[i].xyz;
    float stability_check = length(pos_i - original_pos);
    
    if (constants.particle_count <= constants.max_neighbors)
    {
        // 检查所有粒子
        for (uint j_idx = 0; j_idx < constants.particle_count; j_idx++)
        {
            uint j = sorted_indices[j_idx];
            if (j == i) continue;
            
            vec3 pos_j = predicted_positions[j].xyz;
            vec3 r_vec = pos_i - pos_j;
            float r = length(r_vec);
            
            if (r < constants.smoothing_radius && r > 0.0)
            {
                // 计算Spiky核的梯度
                vec3 grad = spiky_gradient(r_vec, r, constants.smoothing_radius);
                gradient_i += grad;
                gradient_sum_sq += dot(grad, grad);
            }
        }
    }
    else
    {
        // 使用步进采样
        uint step = constants.particle_count / search_count;
        if (step == 0) step = 1;
        
        for (uint search_idx = 0; search_idx < search_count; search_idx++)
        {
            uint j_idx = (search_idx * step) % constants.particle_count;
            uint j = sorted_indices[j_idx];
            if (j == i) continue;
            
            vec3 pos_j = predicted_positions[j].xyz;
            vec3 r_vec = pos_i - pos_j;
            float r = length(r_vec);
            
            if (r < constants.smoothing_radius && r > 0.0)
            {
                vec3 grad = spiky_gradient(r_vec, r, constants.smoothing_radius);
                gradient_i += grad;
                gradient_sum_sq += dot(grad, grad);
            }
        }
    }
    
    // 添加自身梯度的贡献
    gradient_sum_sq += dot(gradient_i, gradient_i);
    
    // 计算拉格朗日乘数λ
    float lambda = 0.0;
    if (gradient_sum_sq > constants.constraint_epsilon)
    {
        lambda = -constraint / (gradient_sum_sq + constants.constraint_epsilon);
    }
    
    // 应用松弛因子和位置校正
    vec3 position_correction = constants.relaxation_factor * lambda * gradient_i;
    
    // 应用稳定性限制，防止过度校正
    float max_correction = constants.smoothing_radius * 0.1; // 限制校正幅度
    if (length(position_correction) > max_correction)
    {
        position_correction = normalize(position_correction) * max_correction;
    }
    
    // 更新预测位置
    predicted_positions[i].xyz += position_correction;
    
    // 确保stability_check被使用（影响极小）
    predicted_positions[i].w += stability_check * 1e-10;
} 