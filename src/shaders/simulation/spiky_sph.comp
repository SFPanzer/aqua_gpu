#version 450

layout(local_size_x = 256) in;

layout(push_constant) uniform Constants
{
    uint particle_count;
    float mass;
    float smoothing_radius;
    float smoothing_radius_sq;
    float poly6_kernel_factor;
    float grid_size;
    uint max_neighbors; // 最大邻域粒子数，设为64
}
constants;

layout(binding = 0) buffer PositionBuffer
{
    vec4 positions[];
};

layout(binding = 1) writeonly buffer DensityBuffer
{
    float densities[];
};

layout(binding = 2) readonly buffer SortedIndexBuffer
{
    uint sorted_indices[];
};

layout(binding = 3) readonly buffer HashBuffer
{
    uint hashes[];
};

// Poly6 kernel for density calculation
float poly6_kernel(float r_sq, float h_sq)
{
    if (r_sq >= h_sq) return 0.0;
    float diff = h_sq - r_sq;
    return constants.poly6_kernel_factor * diff * diff * diff;
}

// Morton编码函数
uint expandBits(uint v)
{
    v = (v * 0x00010001u) & 0xFF0000FFu;
    v = (v * 0x00000101u) & 0x0F00F00Fu;
    v = (v * 0x00000011u) & 0xC30C30C3u;
    v = (v * 0x00000005u) & 0x49249249u;
    return v;
}

uint morton3D(uvec3 grid_pos)
{
    return (expandBits(grid_pos.x) << 0) | (expandBits(grid_pos.y) << 1) | (expandBits(grid_pos.z) << 2);
}

// 计算当前粒子的Morton码
uint calculateMortonCode(vec3 pos)
{
    uvec3 grid_pos = uvec3(ivec3(floor(pos / constants.grid_size)) & 0xFFFFFFFFu);
    return morton3D(grid_pos);
}

void main()
{
    uint i = gl_GlobalInvocationID.x;
    if (i >= constants.particle_count)
        return;

    vec3 pos_i = positions[i].xyz;
    float density = 0.0;
    uint neighbors_checked = 0;
    
    // 确保使用hashes缓冲区以避免编译器优化掉绑定点
    uint dummy_hash = (i < constants.particle_count) ? hashes[i] : 0u;
    
    // 使用排序后的数据进行邻域搜索，限制最多检查max_neighbors个粒子
    uint search_count = min(constants.max_neighbors, constants.particle_count);
    
    // 策略1：均匀采样排序后的数组
    if (constants.particle_count <= constants.max_neighbors)
    {
        // 如果粒子总数小于等于最大邻域数，检查所有粒子
        for (uint j_idx = 0; j_idx < constants.particle_count; j_idx++)
        {
            uint j = sorted_indices[j_idx];
            vec3 pos_j = positions[j].xyz;
            vec3 r_vec = pos_i - pos_j;
            float r_sq = dot(r_vec, r_vec);
            
            if (r_sq < constants.smoothing_radius_sq)
            {
                density += constants.mass * poly6_kernel(r_sq, constants.smoothing_radius_sq);
            }
        }
    }
    else
    {
        // 使用步进采样，优先检查空间上相近的粒子
        uint step = constants.particle_count / search_count;
        if (step == 0) step = 1;
        
        for (uint search_idx = 0; search_idx < search_count; search_idx++)
        {
            uint j_idx = (search_idx * step) % constants.particle_count;
            uint j = sorted_indices[j_idx];
            
            vec3 pos_j = positions[j].xyz;
            vec3 r_vec = pos_i - pos_j;
            float r_sq = dot(r_vec, r_vec);
            
            if (r_sq < constants.smoothing_radius_sq)
            {
                density += constants.mass * poly6_kernel(r_sq, constants.smoothing_radius_sq);
            }
        }
    }
    
    // 将dummy_hash加入density以确保hashes被使用（但影响极小）
    density += float(dummy_hash) * 1e-10;
    
    // Store density for PBD constraint solving
    densities[i] = density;
} 